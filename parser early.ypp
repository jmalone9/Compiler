    %{
#include <iostream>
#include <string>
#include <FlexLexer.h>
#include "nodes.hpp"
using namespace std;

extern yyFlexLexer scanner;
#define yylex() scanner.yylex()
void yyerror(const char *);
extern Node *tree;


%}

%union {
Node *ttype;
};

%token<ttype> ICONSTANT DCONSTANT SCONSTANT K_DO K_DOUBLE RPAREN SEMI
%token<ttype> K_ELSE K_EXIT K_FUNCTION K_IF K_INTEGER K_PRINT_DOUBLE K_PRINT_INTEGER IDENTIFIER
%token<ttype> K_PRINT_STRING K_PROCEDURE K_PROGRAM K_READ_DOUBLE K_READ_INTEGER
%token<ttype> K_READ_STRING K_RETURN K_STRING K_THEN K_WHILE ASSIGN ASSIGN_PLUS
%token<ttype> ASSIGN_MINUS ASSIGN_MULTIPLY ASSIGN_DIVIDE ASSIGN_MOD COMMA COMMENT
%token<ttype> DAND DIVIDE DOR DEQ GEQ GT LBRACKET LEQ LCURLY LPAREN LT MINUS
%token<ttype> DECREMENT MOD MULTIPLY NE NOT PERIOD PLUS INCREMENT RBRACKET RCURLY
%token<ttype> END_OF_FILE


%type<ttype> body function functionbody elements bodyelements procedure funarguments exp vardec print_ value_ arithmetic loopexp logiops loopif program vardeclist tempelse K_typelist typelist


%%
program : 	K_PROGRAM IDENTIFIER body EOF{
    printf("Program declaration \n");
    //$$ = new Node($1, $3);
    //$$->setval("Program declaration\n");
    //tree = $$;
    //$$->setnext($3);
    return 0;
};

body: 		LCURLY bodyelements RCURLY { 
    printf("body declaration \n");
   // $$ = new Node(0,$2);
    //$$->setval("body declaration\n");
};
bodyelements:	function {
	printf("function detected \n");
	//$$ = new Node(0,$1);
	//$$->setval("function detected\n");
		}
		| procedure {
		printf("procedure detected \n");}
		| bodyelements procedure {
		printf("procedure detected \n");}
		| bodyelements function {
		printf("bodyelements function \n");
};
procedure: 	K_PROCEDURE IDENTIFIER LPAREN funarguments RPAREN LCURLY functionbody RCURLY {
		printf("procedure declaration \n");
};
funarguments:   K_INTEGER IDENTIFIER{
	printf("int argument \n");}
		| K_STRING IDENTIFIER {}
		| K_DOUBLE IDENTIFIER {}
		| IDENTIFIER {}
		| ICONSTANT {}
		| SCONSTANT {}
		| DCONSTANT {}
		| vardec {}
		| funarguments COMMA vardec {}
		| %empty {}
		| funarguments COMMA K_INTEGER IDENTIFIER {
			printf("multiple args \n");}
		| funarguments COMMA K_STRING IDENTIFIER {
			printf("multiple args \n");}
		| funarguments COMMA K_DOUBLE IDENTIFIER {
			printf("multiple args \n");}
		| funarguments COMMA IDENTIFIER {
			printf("multiple args \n");}
		| funarguments COMMA ICONSTANT {
			printf("multiple args \n");}
		| funarguments COMMA SCONSTANT  {
			printf("multiple args \n");}
		| funarguments COMMA DCONSTANT {
			printf("multiple args \n");
};
function: 	K_FUNCTION K_typelist IDENTIFIER LPAREN RPAREN LCURLY functionbody RCURLY {
    printf("function declaration \n");
    //$$ = new Node(0,$7);
    //$$->setval("function declaration\n");

} 
		| K_FUNCTION K_typelist IDENTIFIER LPAREN funarguments RPAREN LCURLY functionbody RCURLY {
			printf("function declaration\n");
		}
/*
		| function: 	K_FUNCTION K_INTEGER IDENTIFIER LPAREN RPAREN LCURLY functionbody K_RETURN ICONSTANT SEMI RCURLY {
    printf("function declaration \n");
    //$$ = new Node(0,$7);
    //$$->setval("function declaration\n");

}

		| function: 	K_FUNCTION K_INTEGER IDENTIFIER LPAREN RPAREN LCURLY functionbody K_RETURN IDENTIFIER SEMI RCURLY {
    printf("function declaration \n");
    //$$ = new Node(0,$7);
    //$$->setval("function declaration\n"); 

}*/;


functionbody: 	elements {
    printf("elements \n");
    //$$ = new Node(0,$1);
    //$$->setval("elements\n");
}
 		| functionbody elements {
    printf("functionbody elements \n");
};

elements: 	exp SEMI{
    printf("elements exp \n");}
 		| vardec SEMI{
    printf("elements vardec \n");
    //$$ = new Node(0,$1);
    //$$->setval("elements vardec\n");
}
		| loopif {
  printf("elements loopif \n");
}
		| procedure {
  printf("procedure inside a function\n");
};




exp: 		IDENTIFIER ASSIGN ICONSTANT  {
    			printf("exp assign int \n");}
		| IDENTIFIER ASSIGN SCONSTANT  {
   			 printf("exp assign string \n");}
		|  IDENTIFIER ASSIGN DCONSTANT  {
    			printf("exp assign double \n");}
		|  IDENTIFIER ASSIGN IDENTIFIER  {
    			printf("exp assign variable \n");}
		| IDENTIFIER ASSIGN arithmetic {
			printf("exp assign arithmetic \n");}
		| IDENTIFIER ASSIGN IDENTIFIER LPAREN funarguments RPAREN {
			printf("exp assign arithmetic \n");}
		//temp hack
		| IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN arithmetic {
			printf("exp assign exp assign arithmetic\n");
		}
		| IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN arithmetic {
			printf("exp assign arithmetic\n");
		}

		//arrays
		|  IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN DCONSTANT  {
    			printf("exp assign double \n");}
		|  IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN ICONSTANT  {
    			printf("exp assign int \n");}
		|  IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN IDENTIFIER  {
    			printf("exp assign identifier \n");}
		| IDENTIFIER arithmetic  {}
		| print_ {}
		| arithmetic {}
		| IDENTIFIER LPAREN funarguments RPAREN  {
		printf("function call \n");}
		| IDENTIFIER LPAREN RPAREN  {
		printf("function call \n");
		}
		| K_RETURN exp {
		printf("return\n");
		}
		| K_RETURN IDENTIFIER {
		printf("return\n");
		};
//		| loopif {



loopif:  K_DO LPAREN loopexp RPAREN LCURLY functionbody RCURLY {
			printf("loop exp \n");
		}
		| K_DO LPAREN loopexp RPAREN exp SEMI {
			printf("loop exp \n");
		}
		| K_WHILE LPAREN logicalEXP RPAREN LCURLY functionbody RCURLY{
			printf("while loop \n");}
		| K_WHILE LPAREN logicalEXP RPAREN exp SEMI {
			printf("while loop \n");}

		//fix these while loops with the logicalEXP
/*
		| K_WHILE LPAREN IDENTIFIER logiops ICONSTANT RPAREN LCURLY functionbody RCURLY{
			printf("while loop \n");}
		| K_WHILE LPAREN ICONSTANT logiops IDENTIFIER RPAREN LCURLY functionbody RCURLY{
			printf("while loop \n");}
*/
		| K_IF LPAREN logicalEXP RPAREN K_THEN exp SEMI { 
			printf("If statement no curly\n");
		}
		| K_IF LPAREN logicalEXP RPAREN K_THEN LCURLY functionbody RCURLY {
			printf("If statement curly\n");
		}
		| K_IF LPAREN logicalEXP RPAREN K_THEN exp SEMI tempelse {
			printf("If statement no curly with basic else\n");
		}
		| K_IF LPAREN logicalEXP RPAREN K_THEN LCURLY functionbody RCURLY tempelse  {
			printf("If statement curly with curly else\n");
		}
		//| K_IF LPAREN logicalEXP RPAREN K_THEN exp SEMI K_ELSE K_IF LPAREN logicalEXP RPAREN K_THEN LCURLY functionbody RCURLY tempelse  {
		//	printf("If statement curly with curly else\n");
		| K_IF LPAREN logicalEXP RPAREN K_THEN exp SEMI K_ELSE K_IF LPAREN logicalEXP RPAREN K_THEN LCURLY functionbody RCURLY tempelse  {
			printf("If statement curly with curly else\n");
		};

tempelse: K_ELSE exp SEMI {
			printf("with basic else\n");
		}
		| K_ELSE LCURLY functionbody RCURLY {
			printf("with curly else\n");
};

logiops: LT {}
	| GT{}
	| LEQ {}
	| GEQ {printf("GEQ\n");}
	| DEQ {}
	| NE {printf("NE\n");}
;

logicalEXP: exp logiops exp {}
		| IDENTIFIER logiops IDENTIFIER {}
		| IDENTIFIER logiops arithmetic {}
		| logicalEXP DOR logicalEXP {}
		| logicalEXP DAND logicalEXP {};

loopexp: 	IDENTIFIER ASSIGN ICONSTANT SEMI logicalEXP SEMI arithmetic {
			printf("basic do \n");}
;
arithmetic: 	arithmetic DIVIDE arithmetic {
			printf("arithmetic divide \n");}
		| arithmetic MULTIPLY arithmetic {
			printf("arithmetic multi \n");}
		| arithmetic MOD arithmetic {
			printf("arithmetic mod \n");}
		| arithmetic PLUS arithmetic {
			printf("arithmetic plus \n");}
		| arithmetic MINUS arithmetic {
			printf("arithmetic minus \n");}
		| LPAREN arithmetic RPAREN {
			printf("arithmetic paren \n");}
		| value_ {
			printf("arithmetic val \n");}
		| value_ INCREMENT  {
			printf("increment\n");}
		| value_ DECREMENT arithmetic {
			printf("decrement\n");}
		| value_ ASSIGN_PLUS arithmetic {
			printf("assign plus\n");}
		| value_ ASSIGN_MINUS arithmetic {
			printf("assign minus\n");}
		| value_ ASSIGN_MULTIPLY arithmetic {
			printf("assign multiply\n");}
		| value_ ASSIGN_DIVIDE arithmetic {
			printf("assign divide\n");}
		| value_ ASSIGN_MOD arithmetic {
			printf("assign mod\n");}
;
value_:		ICONSTANT {}
		| DCONSTANT {}
		| IDENTIFIER {}
		| MINUS ICONSTANT {}
		| MINUS DCONSTANT {}
		| MINUS IDENTIFIER LBRACKET arithmetic RBRACKET {}
		| IDENTIFIER LBRACKET arithmetic RBRACKET {}
		| IDENTIFIER LBRACKET IDENTIFIER arithmetic RBRACKET {}
;

print_:		K_PRINT_INTEGER LPAREN IDENTIFIER RPAREN  {
    		printf("exp print int \n");}
 		| K_PRINT_STRING LPAREN SCONSTANT RPAREN  {
    		printf("exp print string \n");}
		| K_PRINT_STRING LPAREN IDENTIFIER RPAREN  {
    		printf("exp print string ind \n");}
		| K_PRINT_DOUBLE LPAREN DCONSTANT RPAREN  {
    		printf("exp print double \n");}
		| K_PRINT_DOUBLE LPAREN value_ RPAREN  {
    		printf("exp print double iden \n");}
    		| K_PRINT_INTEGER LPAREN ICONSTANT RPAREN  {
    		printf("exp print int \n");
};



vardec: 	

		K_typelist IDENTIFIER  {
    			printf("vardec int \n");
			//$$ = new Node($1,$2);
			//$$->setval("vardec int\n");
		} 

/*******************************************************



		| K_DOUBLE IDENTIFIER  {
    			printf("vardec double \n");} 
    		| K_STRING IDENTIFIER  {
			printf("vardec string \n");}
*******************************************************/

		//assign
		| K_INTEGER IDENTIFIER ASSIGN ICONSTANT  {
    			printf("vardec int array \n");} 
		| K_DOUBLE IDENTIFIER ASSIGN DCONSTANT  {
    			printf("vardec double array\n");} 
    		| K_STRING IDENTIFIER ASSIGN SCONSTANT  {
			printf("vardec string array\n");}


		//arrays
		| K_INTEGER IDENTIFIER LBRACKET RBRACKET  {
    			printf("vardec array\n");} 
		| K_DOUBLE IDENTIFIER LBRACKET RBRACKET {
    			printf("vardec double array\n");} 
    		| K_STRING IDENTIFIER LBRACKET RBRACKET {
			printf("vardec string array\n");}
		//assign
		| K_INTEGER IDENTIFIER ASSIGN ICONSTANT LBRACKET RBRACKET {
    			printf("vardec int array\n");} 
		| K_DOUBLE IDENTIFIER ASSIGN DCONSTANT LBRACKET RBRACKET {
    			printf("vardec double array\n");} 
    		| K_STRING IDENTIFIER ASSIGN SCONSTANT LBRACKET RBRACKET {
			printf("vardec string array\n");
		}

		//temp hardcode
		| K_INTEGER IDENTIFIER ASSIGN ICONSTANT COMMA IDENTIFIER {}
/*
//temporarily hard coded for testing
		| K_INTEGER IDENTIFIER ASSIGN ICONSTANT COMMA IDENTIFIER {}
		| K_INTEGER IDENTIFIER COMMA IDENTIFIER {}
		| K_DOUBLE IDENTIFIER LBRACKET arithmetic RBRACKET COMMA IDENTIFIER LBRACKET arithmetic RBRACKET {}
		| K_DOUBLE IDENTIFIER LBRACKET arithmetic RBRACKET COMMA IDENTIFIER LBRACKET arithmetic RBRACKET COMMA IDENTIFIER LBRACKET arithmetic RBRACKET{
*/
		| K_INTEGER vardeclist {}
		| K_DOUBLE vardeclist {
};

vardeclist: IDENTIFIER {}
		| IDENTIFIER LBRACKET RBRACKET {}
		| IDENTIFIER LBRACKET arithmetic RBRACKET{}
		| IDENTIFIER ASSIGN ICONSTANT {}
		| IDENTIFIER LBRACKET RBRACKET ASSIGN ICONSTANT {}
		| IDENTIFIER LBRACKET arithmetic RBRACKET ASSIGN ICONSTANT {}


		| vardeclist COMMA vardeclist {
			printf("multi vardec\n");

};

K_typelist: K_INTEGER {}
		| K_DOUBLE {}
		| K_STRING {}
;

typelist: ICONSTANT {}
		| DCONSTANT {}
		| SCONSTANT {}

EOF: END_OF_FILE {
};

%%


